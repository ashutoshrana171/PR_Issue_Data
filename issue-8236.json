{"source": "https://github.com/QuantConnect/Lean", "title": "Expand DownloaderDataProvider To Handle Canonical Symbols", "link": "https://github.com/QuantConnect/Lean/issues/8236", "state": "open", "created_by": "Martin-Molinero", "created_at": "2024-07-31T13:56:45Z", "updated_at": "2024-07-31T13:56:45Z", "closed_at": null, "body": "<!--- This template provides sections for bugs and features. Please delete any irrelevant sections before submitting -->\r\n\r\n#### Expected Behavior\r\n<!--- Required. Describe the behavior you expect to see for your case. -->\r\n- The `DownloaderDataProvider` launcher program can handle canonical symbols, using a lookup symbols call if supported\r\n#### Actual Behavior\r\n<!--- Required. Describe the actual behavior for your case. -->\r\nN/A\r\n#### Potential Solution\r\n<!--- Optional. Describe any potential solutions and/or thoughts as to what may be causing the difference between expected and actual behavior. -->\r\n```csharp\r\n            if (symbol.IsCanonical())\r\n            {\r\n                try\r\n                {\r\n                      if (_providerInstance is IDataQueueUniverseProvider universeProvider)\r\n                      {\r\n                          symbols = _brokerage.LookupSymbols(symbol, true);\r\n                      }\r\n                      else if (symbol.SecurityType.IsOption())\r\n                      {\r\n                          // we can try with the live option chain provider\r\n                          var chainProvider = new LiveOptionChainProvider();\r\n                          chainProvider.GetOptionContractList(symbol);\r\n                          etc\r\n                }\r\n                }\r\n                catch(ex)\r\n                {\r\n                       Log.Error(ex)\r\n                }\r\n\r\n                if (symbols.IsNullOrEmpty())\r\n                {\r\n                    // log trade warning, we can pass the canonical to the provider, maybe it handles it, Polygon for example does,\r\n                    // polygon should be covered by the first `if` in the try catch though, meaning we can clean it up a bit\r\n                }\r\n            }\r\n```\r\n#### Reproducing the Problem\r\n<!--- Required for Bugs. Describe how to reproduce the problem. This can be via a failing unit test or a simplified algorithm that reliably demonstrates this issue.  -->\r\nN/A\r\n#### System Information\r\n<!--- Required for Bugs. Include any system specific information, such as OS. -->\r\nN/A\r\n#### Checklist\r\n<!--- Confirm that you've provided all the required information. -->\r\n<!--- Required fields --->\r\n- [x] I have completely filled out this template\r\n- [x] I have confirmed that this issue exists on the current `master` branch\r\n- [x] I have confirmed that this is not a duplicate issue by searching [issues](https://github.com/QuantConnect/Lean/issues)\r\n<!--- Required for Bugs, feature request can delete the line below. -->\r\n- [x] I have provided detailed steps to reproduce the issue\r\n\r\n<!--- Template inspired by https://github.com/stevemao/github-issue-templates -->", "comments": []}