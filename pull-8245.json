{"source": "https://github.com/QuantConnect/Lean", "title": "Fix algorithms using OnData(TradeBars) w/o using arg or other OnData().", "link": "https://github.com/QuantConnect/Lean/pull/8245", "state": "closed", "created_by": "nmisch", "created_at": "2024-08-04T20:19:24Z", "updated_at": "2024-08-06T13:15:57Z", "closed_at": "2024-08-06T13:15:56Z", "body": "#### Description\r\n\r\n##### Drafting process\r\n- `sed -i 's/OnData(TradeBars [a-z]*/OnData(Slice slice/' $(git grep -l 'OnData(TradeBars')`\r\n- `sed -i 's/public void OnData(Slice/public override void OnData(Slice/' $(git diff --name-only master)`\r\n- add import if the file doesn't already have one\r\n- revert the six files where the OnData() uses its TradeBars argument\r\n- revert Algorithm.CSharp/DividendAlgorithm.cs, which has OnData(Dividends) and OnData(Splits)\r\n- update any <param ...> on  the line before the changed line\r\n- update any obsolete reference to \"TradeBar\" in the modified files\r\n\r\n#### Related Issue\r\nCloses #8244\r\n\r\n#### Motivation and Context\r\nSee issue.  Starting from commit d24f665ee4c38289907782409c1d210e3d259882, these and other examples ceased getting the method calls they expected.\r\n\r\n#### Requires Documentation Change\r\n\r\nhttps://www.quantconnect.com/docs/v2/writing-algorithms/securities/asset-classes/us-equity/handling-data\r\ntext \"if you define an OnData method that accepts a TradeBar argument ...\"\r\nneeds a corresponding update.  The page needs that update whether or not this\r\npull request proceeds.\r\n\r\n#### How Has This Been Tested?\r\n\r\n##### Algorithm.CSharp/BasicTemplateFillForwardAlgorithm.cs\r\n- Before: https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_a764a3cee8766f1fc166ab2142fb529b.html\r\n- After: https://www.quantconnect.com/terminal/processCache?request=embedded_backtest_143fa389801acb939d85be8f0c316f10.html\r\n\r\n#### Types of changes\r\n<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->\r\n- [X] Bug fix (non-breaking change which fixes an issue)\r\n- [ ] Refactor (non-breaking change which improves implementation)\r\n- [ ] Performance (non-breaking change which improves performance. Please add associated performance test and results)\r\n- [ ] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n- [ ] Non-functional change (xml comments/documentation/etc)\r\n\r\n#### Checklist:\r\n<!--- The following is a checklist of items that MUST be completed before a PR is accepted -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [X] My code follows the code style of this project.\r\n- [X] I have read the **CONTRIBUTING** [document](https://github.com/QuantConnect/Lean/blob/master/CONTRIBUTING.md).\r\n- [ ] I have added tests to cover my changes.  Few of the example algorithms have tests, hence this regression escaping.  Addressing that backlog would be a larger project.\r\n- [X] All new and existing tests passed.  Not really.  The test run ended the same way the last master commit test run ended, at `ERROR:: MarketOnClose orders must be placed within 00:15:30 before market close. Override this TimeSpan buffer by setting Orders.MarketOnCloseOrder.SubmissionTimeBuffer in QCAlgorithm.Initialize().`\r\n- [X] My branch follows the naming convention `bug-<issue#>-<description>` or `feature-<issue#>-<description>`\r\n\r\n<!--- Template inspired by https://www.talater.com/open-source-templates/#/page/99 -->", "comments": [{"user": "Martin-Molinero", "is_staff": true, "created_at": "2024-08-05T23:29:57Z", "body": "Hey @nmisch! Welcome to Lean, thank you for the contribution, nice catch! "}]}