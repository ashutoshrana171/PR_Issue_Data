{"source": "https://github.com/QuantConnect/Lean", "title": "Add more options to Field class", "link": "https://github.com/QuantConnect/Lean/pull/8228", "state": "closed", "created_by": "Marinovsky", "created_at": "2024-07-25T14:03:10Z", "updated_at": "2024-08-07T22:08:35Z", "closed_at": "2024-08-07T22:08:34Z", "body": "<!--- Provide a general summary of your changes in the Title above -->\r\n\r\n#### Description\r\n<!--- Describe your changes in detail -->\r\n- Add more options to Field class so that the user can select properties from QuoteBars and Tick.\r\n- Improve the implementation of the options in the Field class to avoid object creation each time certain property is called.\r\n- Update `QCAlgorithm.Indicators` to handle the case where the selector requires the data type to be quote.\r\n- Add regression and unit tests to cover these changes.\r\n#### Related Issue\r\n<!--- This project only accepts pull requests related to open issues -->\r\n<!--- If suggesting a new feature or change, please discuss it in an issue first -->\r\n<!--- If fixing a bug, there should be an issue describing it with steps to reproduce -->\r\n<!--- Please link to the issue here: -->\r\nCloses #6117 \r\n#### Motivation and Context\r\n<!--- Why is this change required? What problem does it solve? -->\r\nWith this change users will be able to use more attributes than those that are available, e.g. BidPrice.\r\n#### Requires Documentation Change\r\n<!--- Please indicate if these changes will require updates to documentation, and if so, specify what changes are required -->\r\nThis change might require an update to documentation briefing the users on the new Field options.\r\n#### How Has This Been Tested?\r\n<!--- Please describe in detail how you tested your changes. -->\r\n<!--- Include details of your testing environment, and the tests you ran to -->\r\n<!--- see how your change affects other areas of the code, etc. -->\r\nI created two regression algorithms (in C# and Python) that create identity indicators with the new introduced selectors (using equity and option symbols). During the algorithm, it asserts that the value of the indicator matches with the given data in the slice (since the indicator is an identity indicator). I also created unit tests asserting the expected behavior but also the case where the resolution doesn't match with the selector data type. In that last case, the unit test asserted that a default selector was used.\r\n#### Types of changes\r\n<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->\r\n- [ ] Bug fix (non-breaking change which fixes an issue)\r\n- [x] Refactor (non-breaking change which improves implementation)\r\n- [ ] Performance (non-breaking change which improves performance. Please add associated performance test and results)\r\n- [x] New feature (non-breaking change which adds functionality)\r\n- [ ] Breaking change (fix or feature that would cause existing functionality to change)\r\n- [ ] Non-functional change (xml comments/documentation/etc)\r\n\r\n#### Checklist:\r\n<!--- The following is a checklist of items that MUST be completed before a PR is accepted -->\r\n<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->\r\n- [x] My code follows the code style of this project.\r\n- [x] I have read the **CONTRIBUTING** [document](https://github.com/QuantConnect/Lean/blob/master/CONTRIBUTING.md).\r\n- [x] I have added tests to cover my changes. <!--- If not applicable, please explain why -->\r\n- [x] All new and existing tests passed.\r\n- [x] My branch follows the naming convention `bug-<issue#>-<description>` or `feature-<issue#>-<description>`\r\n\r\n<!--- Template inspired by https://www.talater.com/open-source-templates/#/page/99 -->\r\n", "comments": []}